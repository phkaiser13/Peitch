name: Release -> Render & Publish Packaging

# Trigger on new tags
on:
  push:
    tags:
      - '*'
permissions:
  contents: write   # allow commits/pushes (for the repo where this workflow lives)

env:
  # Target repositories (change to your actual repositories if different)
  HOME_TAP_REPO: "phkaiser13/homebrew-tap"
  VCPKG_REPO: "phkaiser13/vcpkg-registry"
  AUR_PACKAGES_REPO: "phkaiser13/aur-packages"

  # Templates for EXTERNAL repositories (inside THIS repository)
  TEMPLATE_HOMEBREW: "./templates/Extern-pkgs/homebrew/ph.rb.template"
  TEMPLATE_VCPKG_PORTFILE: "./templates/Extern-pkgs/vcpkg/portfile.cmake.template"
  TEMPLATE_VCPKG_JSON: "./templates/Extern-pkgs/vcpkg/vcpkg.json.template"
  TEMPLATE_AUR_PKGBUILD: "./templates/Extern-pkgs/aur/PKGBUILD.template"

  # Templates for THIS repository (For-Repo -> packaging/)
  SHARED_TEMPLATES_DIR: "./templates/For-Repo"

jobs:
  render-and-push:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout current repository (templates & workspace)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release version (strip leading 'v')
        id: version
        run: |
          set -euo pipefail
          echo "GITHUB_REF_NAME = ${{ github.ref_name }}"
          RAW="${{ github.ref_name }}"
          if [[ -z "$RAW" ]]; then
            echo "ERROR: workflow must run from a release tag (GITHUB_REF_NAME empty)."
            exit 1
          fi
          VERSION="${RAW#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download source tarball and compute checksums
        id: checksums
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          TAR_URL="https://github.com/phkaiser13/peitch/archive/refs/tags/v${VERSION}.tar.gz"
          echo "Tarball URL: ${TAR_URL}"
          TMP="$(mktemp)"
          curl -L --fail -sS "${TAR_URL}" -o "${TMP}"
          # SHA256 & SHA512
          if command -v sha256sum >/dev/null 2>&1; then
            TARBALL_SHA256="$(sha256sum "${TMP}" | awk '{print $1}')"
            TARBALL_SHA512="$(sha512sum "${TMP}" | awk '{print $1}')"
          else
            TARBALL_SHA256="$(shasum -a 256 "${TMP}" | awk '{print $1}')"
            TARBALL_SHA512="$(shasum -a 512 "${TMP}" | awk '{print $1}')"
          fi
          echo "Computed tarball SHA256: ${TARBALL_SHA256}"
          echo "Computed tarball SHA512: ${TARBALL_SHA512}"
          # export
          echo "ph_tarb_sha256=${TARBALL_SHA256}" >> $GITHUB_OUTPUT
          echo "ph_tarb_sha512=${TARBALL_SHA512}" >> $GITHUB_OUTPUT
          # keep tmp path in env in case other steps want to reuse
          echo "TARBALL_PATH=${TMP}" >> $GITHUB_ENV

      - name: Try to download Windows installer asset and compute installer sha256 (optional)
        id: installer
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          INSTALLER_NAME="ph-${VERSION}-installer.exe"
          INSTALLER_URL="https://github.com/phkaiser13/peitch/releases/download/v${VERSION}/${INSTALLER_NAME}"
          echo "Attempting to download installer: ${INSTALLER_URL}"
          TMP_INSTALLER="$(mktemp)"
          if curl -L --fail -sS "${INSTALLER_URL}" -o "${TMP_INSTALLER}"; then
            if command -v sha256sum >/dev/null 2>&1; then
              INSTALLER_SHA256="$(sha256sum "${TMP_INSTALLER}" | awk '{print $1}')"
            else
              INSTALLER_SHA256="$(shasum -a 256 "${TMP_INSTALLER}" | awk '{print $1}')"
            fi
            echo "Installer found. SHA256: ${INSTALLER_SHA256}"
            echo "installer_sha256=${INSTALLER_SHA256}" >> $GITHUB_OUTPUT
            echo "INSTALLER_PATH=${TMP_INSTALLER}" >> $GITHUB_ENV
          else
            echo "Installer not found at ${INSTALLER_URL} -- skipping installer checksum."
            echo "installer_sha256=" >> $GITHUB_OUTPUT
          fi

      - name: Render shared templates into packaging/ (THIS repository)
        id: render-local
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          TARBALL_SHA256="${{ steps.checksums.outputs.ph_tarb_sha256 }}"
          TARBALL_SHA512="${{ steps.checksums.outputs.ph_tarb_sha512 }}"
          INSTALLER_SHA256="${{ steps.installer.outputs.installer_sha256 }}"
          TAR_URL="https://github.com/phkaiser13/peitch/archive/refs/tags/v${VERSION}.tar.gz"
          TODAY="$(date -R)"

          echo "🔄 Rendering shared templates into packaging/ ..."

          # Create all packaging directories
          mkdir -p packaging/chocolatey/tools
          mkdir -p packaging/rpm
          mkdir -p packaging/debian
          mkdir -p packaging/snap
          mkdir -p packaging/nsis

          # === CHOCOLATEY ===
          # Render Chocolatey nuspec
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/ph.nuspec.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/ph.nuspec.template" > packaging/chocolatey/ph.nuspec
            echo "✅ Rendered packaging/chocolatey/ph.nuspec"
          fi

          # Render Chocolatey install script
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/chocolateyinstall.ps1.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                -e "s/@ph_INSTALLER_SHA256@/${INSTALLER_SHA256}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/chocolateyinstall.ps1.template" > packaging/chocolatey/tools/chocolateyinstall.ps1
            echo "✅ Rendered packaging/chocolatey/tools/chocolateyinstall.ps1"
          fi

          # === RPM ===
          # Render RPM spec
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/ph.spec.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                -e "s,@ph_TARBALL_URL@,${TAR_URL},g" \
                -e "s/@ph_RELEASE_DATE@/${TODAY}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/ph.spec.template" > packaging/rpm/ph.spec
            echo "✅ Rendered packaging/rpm/ph.spec"
          fi

          # === DEBIAN ===
          # Render Debian control
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/debian/control.template" ]]; then
            cp "${{ env.SHARED_TEMPLATES_DIR }}/debian/control.template" packaging/debian/control
            echo "✅ Rendered packaging/debian/control"
          fi

          # Render Debian postrm
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/debian/postrm.template" ]]; then
            cp "${{ env.SHARED_TEMPLATES_DIR }}/debian/postrm.template" packaging/debian/postrm
            chmod +x packaging/debian/postrm
            echo "✅ Rendered packaging/debian/postrm"
          fi

          # Render Debian rules
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/debian/rules.template" ]]; then
            cp "${{ env.SHARED_TEMPLATES_DIR }}/debian/rules.template" packaging/debian/rules
            chmod +x packaging/debian/rules
            echo "✅ Rendered packaging/debian/rules"
          fi

          # Render Debian changelog
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/debian/changelog.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                -e "s/@ph_RELEASE_DATE@/${TODAY}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/debian/changelog.template" > packaging/debian/changelog
            echo "✅ Rendered packaging/debian/changelog"
          fi

          # === SNAP ===
          # Render Snap snapcraft.yaml
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/snap/snapcraft.yaml.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/snap/snapcraft.yaml.template" > packaging/snap/snapcraft.yaml
            echo "✅ Rendered packaging/snap/snapcraft.yaml"
          fi

          # === NSIS ===
          # Render NSIS installer script
          if [[ -f "${{ env.SHARED_TEMPLATES_DIR }}/nsis/ph.nsi.template" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                "${{ env.SHARED_TEMPLATES_DIR }}/nsis/ph.nsi.template" > packaging/nsis/ph.nsi
            echo "✅ Rendered packaging/nsis/ph.nsi"
          fi

          echo "🎯 All shared templates rendered successfully!"

      - name: Commit shared-template renders to THIS repository
        id: commit-local
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add packaging || true
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit in packaging/"
          else
            git commit -m "chore(release): render packaging templates for ph ${{ steps.version.outputs.version }}"
            git push origin HEAD:refs/heads/main
            echo "✅ Committed packaging files to repository"
          fi

      # ---------------------------
      # Update homebrew-tap repository
      # ---------------------------
      - name: Checkout homebrew-tap repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HOME_TAP_REPO }}
          token: ${{ secrets.GH_PAT || github.token }}
          path: homebrew-tap
          fetch-depth: 0

      - name: Render and place Homebrew formula
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          TARBALL_SHA256="${{ steps.checksums.outputs.ph_tarb_sha256 }}"
          TEMPLATE="${{ env.TEMPLATE_HOMEBREW }}"
          
          if [[ ! -f "${TEMPLATE}" ]]; then
            echo "❌ ERROR: Homebrew template not found at ${TEMPLATE}"
            exit 1
          fi
          
          mkdir -p homebrew-tap/Formula
          sed -e "s/@ph_VERSION@/${VERSION}/g" \
              -e "s/@ph_SHA256@/${TARBALL_SHA256}/g" \
              "${TEMPLATE}" > homebrew-tap/Formula/ph.rb
          echo "✅ Rendered homebrew-tap/Formula/ph.rb"

      - name: Commit & push Homebrew formula
        run: |
          set -euo pipefail
          cd homebrew-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/ph.rb
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit in homebrew-tap."
          else
            git commit -m "chore(release): update ph formula to ${{ steps.version.outputs.version }}"
            git push origin HEAD:refs/heads/main
            echo "🍺 Updated Homebrew formula"
          fi

      # ---------------------------
      # Update vcpkg-registry repository
      # ---------------------------
      - name: Checkout vcpkg-registry repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.VCPKG_REPO }}
          token: ${{ secrets.GH_PAT || github.token }}
          path: vcpkg-registry
          fetch-depth: 0

      - name: Render and place vcpkg port files
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          TARBALL_SHA512="${{ steps.checksums.outputs.ph_tarb_sha512 }}"
          
          mkdir -p vcpkg-registry/ports/ph

          # Render portfile.cmake
          if [[ ! -f "${{ env.TEMPLATE_VCPKG_PORTFILE }}" ]]; then
            echo "❌ ERROR: vcpkg portfile template missing: ${{ env.TEMPLATE_VCPKG_PORTFILE }}"
            exit 1
          fi
          sed -e "s/@ph_VERSION@/${VERSION}/g" \
              -e "s/@ph_SHA512@/${TARBALL_SHA512}/g" \
              "${{ env.TEMPLATE_VCPKG_PORTFILE }}" > vcpkg-registry/ports/ph/portfile.cmake
          echo "✅ Rendered portfile.cmake"

          # Render vcpkg.json
          if [[ -f "${{ env.TEMPLATE_VCPKG_JSON }}" ]]; then
            sed -e "s/@ph_VERSION@/${VERSION}/g" \
                "${{ env.TEMPLATE_VCPKG_JSON }}" > vcpkg-registry/ports/ph/vcpkg.json
            echo "✅ Rendered vcpkg.json"
          fi

      - name: Commit & push vcpkg-registry
        run: |
          set -euo pipefail
          cd vcpkg-registry
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ports/ph || true
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit in vcpkg-registry."
          else
            git commit -m "chore(release): update vcpkg port for ph ${{ steps.version.outputs.version }}"
            git push origin HEAD:refs/heads/main
            echo "📦 Updated vcpkg registry"
          fi

      # ---------------------------
      # Update aur-packages repository
      # ---------------------------
      - name: Checkout aur-packages repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AUR_PACKAGES_REPO }}
          token: ${{ secrets.GH_PAT || github.token }}
          path: aur-packages
          fetch-depth: 0

      - name: Render and place PKGBUILD
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          TARBALL_SHA256="${{ steps.checksums.outputs.ph_tarb_sha256 }}"
          TEMPLATE="${{ env.TEMPLATE_AUR_PKGBUILD }}"
          
          if [[ ! -f "${TEMPLATE}" ]]; then
            echo "❌ ERROR: AUR PKGBUILD template not found at ${TEMPLATE}"
            exit 1
          fi
          
          mkdir -p aur-packages/ph
          sed -e "s/@ph_VERSION@/${VERSION}/g" \
              -e "s/@ph_SHA256@/${TARBALL_SHA256}/g" \
              "${TEMPLATE}" > aur-packages/ph/PKGBUILD
          echo "✅ Rendered aur-packages/ph/PKGBUILD"

      - name: Generate .SRCINFO for PKGBUILD (optional)
        run: |
          set -euo pipefail
          if command -v docker >/dev/null 2>&1; then
            echo "🐳 Generating .SRCINFO with Docker..."
            mkdir -p /tmp/pkgbdir
            cp aur-packages/ph/PKGBUILD /tmp/pkgbdir/PKGBUILD
            docker run --rm -v /tmp/pkgbdir:/work -w /work archlinux:latest bash -lc "
              pacman -Sy --noconfirm --needed base-devel >/dev/null 2>&1 || true
              makepkg --printsrcinfo > .SRCINFO
            " && mv /tmp/pkgbdir/.SRCINFO aur-packages/ph/.SRCINFO
            echo "✅ Generated .SRCINFO"
          else
            echo "⚠️ Docker not available — skipping .SRCINFO generation"
          fi

      - name: Commit & push aur-packages
        run: |
          set -euo pipefail
          cd aur-packages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ph || true
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit in aur-packages."
          else
            git commit -m "chore(release): update PKGBUILD for ph ${{ steps.version.outputs.version }}"
            git push origin HEAD:refs/heads/main
            echo "🏛️ Updated AUR package"
          fi

      - name: Summary
        run: |
          set -euo pipefail
          echo "🎉 Release packaging completed for ph ${{ steps.version.outputs.version }}"
          echo ""
          echo "📊 Checksums:"
          echo "  📄 Tarball SHA256: ${{ steps.checksums.outputs.ph_tarb_sha256 }}"
          echo "  📄 Tarball SHA512: ${{ steps.checksums.outputs.ph_tarb_sha512 }}"
          if [[ -n "${{ steps.installer.outputs.installer_sha256 }}" ]]; then
            echo "  🪟 Installer SHA256: ${{ steps.installer.outputs.installer_sha256 }}"
          else
            echo "  🪟 Installer: Not found (skipped)"
          fi
          echo ""
          echo "📦 Updated repositories:"
          echo "  🍺 ${{ env.HOME_TAP_REPO }} (Homebrew)"
          echo "  📚 ${{ env.VCPKG_REPO }} (vcpkg)"
          echo "  🏛️ AUR Package"
          echo ""
          echo "✨ All packages built and published to GitHub Releases!"
          echo "🔗 Release URL: https://github.com/phkaiser13/peitch/releases/tag/${{ github.ref_name }}"️ ${{ env.AUR_PACKAGES_REPO }} (AUR)"
          echo "  📁 phkaiser13/peitch (packaging/)"
          echo ""
          echo "📋 Generated packaging files:"
          echo "  🍫 packaging/chocolatey/ (Chocolatey)"
          echo "  🔴 packaging/rpm/ (RPM/RHEL/Fedora)"
          echo "  🐧 packaging/debian/ (Debian/Ubuntu)"
          echo "  📦 packaging/snap/ (Snap)"
          echo "  🪟 packaging/nsis/ (Windows NSIS Installer)"
          echo ""
          echo "✨ All package managers updated successfully!"

  # ---------------------------
  # New Jobs: Build Installers
  # ---------------------------

  build-windows-installer:
    runs-on: windows-latest
    needs: render-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.3"

      - name: Setup build dependencies (Windows)
        shell: bash
        run: |
          # Install vcpkg dependencies
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install curl nlohmann-json --triplet=x64-windows-static

      - name: Build ph for Windows
        shell: bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=x64-windows-static \
                ..
          cmake --build . --config Release

      - name: Install NSIS
        run: |
          Invoke-WebRequest -Uri "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.08/nsis-3.08-setup.exe" -OutFile "nsis-setup.exe"
          Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait

      - name: Build Windows Installer
        shell: bash
        run: |
          # Copy built executable to packaging directory
          mkdir -p packaging/nsis/bin
          cp build/Release/ph.exe packaging/nsis/bin/
          cp build/Release/ph-service.exe packaging/nsis/bin/ || echo "Service binary not found, skipping"
          
          # Copy additional files
          cp LICENSE packaging/nsis/
          cp README.md packaging/nsis/
          cp -r docs packaging/nsis/ || echo "Docs directory not found, skipping"
          
          # Build installer
          cd packaging/nsis
          /c/Program\ Files\ \(x86\)/NSIS/makensis.exe ph.nsi

      - name: Upload Windows Installer to Release
        uses: softprops/action-gh-release@v1
        with:
          files: packaging/nsis/ph-${{ steps.version.outputs.version }}-installer.exe
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deb-package:
    runs-on: ubuntu-latest
    needs: render-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            libcurl4-openssl-dev \
            liblua5.3-dev \
            nlohmann-json3-dev \
            rustc \
            cargo \
            debhelper \
            devscripts \
            fakeroot

      - name: Extract source and prepare Debian package
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create working directory
          mkdir -p /tmp/build-deb
          cd /tmp/build-deb
          
          # Download and extract source
          wget "https://github.com/phkaiser13/peitch/archive/refs/tags/v${VERSION}.tar.gz" -O "ph_${VERSION}.orig.tar.gz"
          tar -xzf "ph_${VERSION}.orig.tar.gz"
          cd "peitch-${VERSION}"
          
          # Copy Debian packaging files
          mkdir -p debian
          cp -r "${{ github.workspace }}/packaging/debian/"* debian/
          
          # Build package
          dpkg-buildpackage -us -uc -b

      - name: Upload DEB package to Release
        uses: softprops/action-gh-release@v1
        with:
          files: /tmp/build-deb/*.deb
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rpm-package:
    runs-on: ubuntu-latest
    needs: render-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup RPM build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm rpmbuild
          
          # Create RPM build directories
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Install build dependencies (simulate)
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            libcurl4-openssl-dev \
            liblua5.3-dev \
            nlohmann-json3-dev \
            rustc \
            cargo

      - name: Build RPM package
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Download source tarball
          wget "https://github.com/phkaiser13/peitch/archive/refs/tags/v${VERSION}.tar.gz" \
               -O ~/rpmbuild/SOURCES/ph-${VERSION}.tar.gz
          
          # Copy spec file
          cp packaging/rpm/ph.spec ~/rpmbuild/SPECS/
          
          # Build RPM
          rpmbuild -ba ~/rpmbuild/SPECS/ph.spec

      - name: Upload RPM package to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ~/rpmbuild/RPMS/*/*.rpm
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-snap-package:
    runs-on: ubuntu-latest
    needs: render-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Snapcraft
        uses: snapcore/action-build@v1
        with:
          snapcraft-channel: stable

      - name: Build Snap package
        run: |
          # Copy snapcraft.yaml to root
          cp packaging/snap/snapcraft.yaml ./
          
          # Build snap
          snapcraft --verbose

      - name: Upload Snap package to Release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.snap"
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-chocolatey-package:
    runs-on: windows-latest
    needs: [render-and-push, build-windows-installer]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Wait for Windows Installer and update SHA256
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          INSTALLER_NAME="ph-${VERSION}-installer.exe"
          
          echo "Waiting for Windows installer to be available..."
          for i in {1..30}; do
            if curl -I -f "https://github.com/phkaiser13/peitch/releases/download/v${VERSION}/${INSTALLER_NAME}" >/dev/null 2>&1; then
              echo "Installer found!"
              break
            fi
            echo "Attempt $i/30: Installer not yet available, waiting 30 seconds..."
            sleep 30
          done
          
          # Download and get SHA256
          curl -L "https://github.com/phkaiser13/peitch/releases/download/v${VERSION}/${INSTALLER_NAME}" -o "${INSTALLER_NAME}"
          INSTALLER_SHA256=$(sha256sum "${INSTALLER_NAME}" | awk '{print $1}')
          echo "Installer SHA256: ${INSTALLER_SHA256}"
          
          # Update Chocolatey install script with correct SHA256
          sed -i "s/checksum = ''/checksum = '${INSTALLER_SHA256}'/" packaging/chocolatey/tools/chocolateyinstall.ps1

      - name: Build Chocolatey package
        shell: powershell
        run: |
          cd packaging/chocolatey
          choco pack ph.nuspec

      - name: Upload Chocolatey package to Release
        uses: softprops/action-gh-release@v1
        with:
          files: packaging/chocolatey/*.nupkg
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------
  # Final summary with all built packages
  # ---------------------------
  
  final-summary:
    runs-on: ubuntu-latest
    needs: [render-and-push, build-windows-installer, build-deb-package, build-rpm-package, build-snap-package, build-chocolatey-package]
    if: always()
    steps:
      - name: Final Release Summary
        run: |
          echo "🎉 Complete release workflow finished for ph ${{ github.ref_name }}"
          echo ""
          echo "📦 Generated and uploaded installers:"
          echo "  🪟 Windows NSIS Installer (.exe)"
          echo "  🐧 Debian Package (.deb)"
          echo "  🔴 RPM Package (.rpm)"
          echo "  📦 Snap Package (.snap)"
          echo "  🍫 Chocolatey Package (.nupkg)"
          echo ""
          echo "📋 Updated external repositories:"
          echo "  🍺 Homebrew Formula"
          echo "  📚 vcpkg Registry"
          echo "  🏛