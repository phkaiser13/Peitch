# CircleCI Configuration for peitch project
# Follows best practices from curl project and other large-scale C++/Rust projects
# Supports cross-platform compilation with extensive matrix builds

version: 2.1

# Using CircleCI orbs for enhanced functionality and optimized caching
orbs:
  rust: circleci/rust@1.6.0
  
# Custom executors for different platforms and architectures
executors:
  linux-x86_64:
    docker:
      - image: cimg/base:current
    resource_class: large
    environment:
      CARGO_HOME: /home/circleci/.cargo
      PATH: /home/circleci/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      
  linux-arm64:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: arm.large
    environment:
      CARGO_HOME: /home/circleci/.cargo
      PATH: /home/circleci/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      
  macos-x86_64:
    macos:
      xcode: 15.2.0
    resource_class: macos.x86.medium.gen2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      
  macos-arm64:
    macos:
      xcode: 15.2.0
    resource_class: macos.m1.large.gen1
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

# Reusable commands to maintain DRY principles
commands:
  # Linux dependency installation optimized for Ubuntu/Debian
  install-linux-deps:
    description: "Install build dependencies on Linux"
    steps:
      - run:
          name: Update package lists and install dependencies
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends \
              build-essential \
              cmake \
              pkg-config \
              libcurl4-openssl-dev \
              liblua5.4-dev \
              nlohmann-json3-dev \
              libssl-dev \
              ca-certificates \
              git
            
            # Install Rust if not already available
            if ! command -v rustc &> /dev/null; then
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source ~/.cargo/env
            fi

  # macOS dependency installation via Homebrew
  install-macos-deps:
    description: "Install build dependencies on macOS"
    steps:
      - run:
          name: Install Homebrew dependencies
          command: |
            # Install dependencies via Homebrew
            brew update
            brew install cmake pkg-config curl lua nlohmann-json openssl
            
            # Install Rust toolchain if not present
            if ! command -v rustc &> /dev/null; then
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source ~/.cargo/env
            fi
            
            # Ensure Rust is in PATH for subsequent steps
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV

  # Standardized checkout with submodules if any
  checkout-code:
    description: "Checkout code with optimizations"
    steps:
      - checkout
      - run:
          name: Initialize and update submodules
          command: |
            git submodule update --init --recursive || echo "No submodules found"

  # CMake configuration with optimizations
  build-project:
    description: "Configure and build project with CMake"
    steps:
      - run:
          name: Configure CMake
          command: |
            cmake -S . -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_VERBOSE_MAKEFILE=ON
      - run:
          name: Build project
          command: |
            cmake --build build --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
          no_output_timeout: 20m

  # C++ tests execution
  run-cpp-tests:
    description: "Execute C++ unit tests via CTest"
    steps:
      - run:
          name: Run C++ tests
          command: |
            cd build
            if [ -f CTestTestfile.cmake ]; then
              ctest --output-on-failure --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
            else
              echo "No C++ tests configured (CTestTestfile.cmake not found)"
            fi

  # Rust tests for all modules
  run-rust-tests:
    description: "Execute Rust unit tests for all modules"
    steps:
      - run:
          name: Run Rust module tests
          command: |
            set -e
            echo "=== Running Rust tests for all modules ==="
            
            # Test each Rust module independently
            for module_dir in src/modules/*/; do
              if [ -f "${module_dir}Cargo.toml" ]; then
                module_name=$(basename "$module_dir")
                echo "--- Testing Rust module: $module_name ---"
                (cd "$module_dir" && cargo test --release --verbose)
              fi
            done
            
            echo "=== All Rust module tests completed ==="

  # Integration tests execution
  run-integration-tests:
    description: "Execute integration test suite"
    steps:
      - run:
          name: Run integration tests
          command: |
            if [ -f tests/integration_test.sh ]; then
              chmod +x tests/integration_test.sh
              ./tests/integration_test.sh
            else
              echo "Integration test script not found, skipping"
            fi

  # Performance benchmarks (optional)
  run-benchmarks:
    description: "Execute performance benchmarks"
    steps:
      - run:
          name: Run benchmarks
          command: |
            # Run Rust benchmarks if available
            for module_dir in src/modules/*/; do
              if [ -f "${module_dir}Cargo.toml" ]; then
                if grep -q "\[\[bench\]\]" "${module_dir}Cargo.toml"; then
                  module_name=$(basename "$module_dir")
                  echo "--- Running benchmarks for: $module_name ---"
                  (cd "$module_dir" && cargo bench || echo "Benchmarks failed for $module_name")
                fi
              fi
            done

# Job definitions with extensive platform coverage
jobs:
  # Linux x86_64 build and test
  build-test-linux-x86:
    executor: linux-x86_64
    steps:
      - checkout-code
      - install-linux-deps
      - rust/cache:
          cache_version: v2
      - restore_cache:
          keys:
            - cmake-cache-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
            - cmake-cache-v1-{{ checksum "CMakeLists.txt" }}
            - cmake-cache-v1-
      - build-project
      - save_cache:
          key: cmake-cache-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
          paths:
            - build
      - run-cpp-tests
      - run-rust-tests
      - run-integration-tests
      - run-benchmarks
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/bin
          destination: linux-x86_64-binaries
      - store_artifacts:
          path: build/CMakeCache.txt
          destination: build-config

  # Linux ARM64 build and test
  build-test-linux-arm:
    executor: linux-arm64
    steps:
      - checkout-code
      - install-linux-deps
      - rust/cache:
          cache_version: v2-arm64
      - restore_cache:
          keys:
            - cmake-cache-arm64-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
            - cmake-cache-arm64-v1-{{ checksum "CMakeLists.txt" }}
            - cmake-cache-arm64-v1-
      - build-project
      - save_cache:
          key: cmake-cache-arm64-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
          paths:
            - build
      - run-cpp-tests
      - run-rust-tests
      - run-integration-tests
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/bin
          destination: linux-arm64-binaries

  # macOS x86_64 build and test
  build-test-macos-x86:
    executor: macos-x86_64
    steps:
      - checkout-code
      - install-macos-deps
      - rust/cache:
          cache_version: v2-macos-x86
      - restore_cache:
          keys:
            - cmake-cache-macos-x86-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
            - cmake-cache-macos-x86-v1-{{ checksum "CMakeLists.txt" }}
            - cmake-cache-macos-x86-v1-
      - build-project
      - save_cache:
          key: cmake-cache-macos-x86-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
          paths:
            - build
      - run-cpp-tests
      - run-rust-tests
      - run-integration-tests
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/bin
          destination: macos-x86_64-binaries

  # macOS Apple Silicon (M1/M2) build and test
  build-test-macos-arm:
    executor: macos-arm64
    steps:
      - checkout-code
      - install-macos-deps
      - rust/cache:
          cache_version: v2-macos-arm64
      - restore_cache:
          keys:
            - cmake-cache-macos-arm64-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
            - cmake-cache-macos-arm64-v1-{{ checksum "CMakeLists.txt" }}
            - cmake-cache-macos-arm64-v1-
      - build-project
      - save_cache:
          key: cmake-cache-macos-arm64-v1-{{ checksum "CMakeLists.txt" }}-{{ checksum "src/core/CMakeLists.txt" }}
          paths:
            - build
      - run-cpp-tests
      - run-rust-tests
      - run-integration-tests
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/bin
          destination: macos-arm64-binaries

  # Code quality and security scanning
  code-quality:
    executor: linux-x86_64
    steps:
      - checkout-code
      - install-linux-deps
      - rust/cache:
          cache_version: v2-quality
      - run:
          name: Run Clippy (Rust linting)
          command: |
            rustup component add clippy
            for module_dir in src/modules/*/; do
              if [ -f "${module_dir}Cargo.toml" ]; then
                module_name=$(basename "$module_dir")
                echo "--- Running Clippy for: $module_name ---"
                (cd "$module_dir" && cargo clippy -- -D warnings) || echo "Clippy warnings found in $module_name"
              fi
            done
      - run:
          name: Run Rust formatting check
          command: |
            rustup component add rustfmt
            for module_dir in src/modules/*/; do
              if [ -f "${module_dir}Cargo.toml" ]; then
                module_name=$(basename "$module_dir")
                echo "--- Checking format for: $module_name ---"
                (cd "$module_dir" && cargo fmt --check) || echo "Format issues found in $module_name"
              fi
            done
      - run:
          name: Security audit
          command: |
            cargo install --force cargo-audit
            for module_dir in src/modules/*/; do
              if [ -f "${module_dir}Cargo.toml" ]; then
                module_name=$(basename "$module_dir")
                echo "--- Security audit for: $module_name ---"
                (cd "$module_dir" && cargo audit) || echo "Security issues found in $module_name"
              fi
            done

# Workflow orchestration
workflows:
  version: 2
  
  # Main build and test workflow
  build_and_test:
    jobs:
      - build-test-linux-x86:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - build-test-linux-arm:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - build-test-macos-x86:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - build-test-macos-arm:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - code-quality:
          filters:
            branches:
              only: /.*/

  # Nightly builds for comprehensive testing
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Run at 2 AM UTC daily
          filters:
            branches:
              only:
                - main
    jobs:
      - build-test-linux-x86
      - build-test-linux-arm
      - build-test-macos-x86
      - build-test-macos-arm
      - code-quality
