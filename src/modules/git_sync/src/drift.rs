/* Copyright (C) 2025 Pedro Henrique / phkaiser13
* File: src/modules/git_sync/src/drift.rs
*
* This file contains the business logic for the `drift` command. It orchestrates
* the process of detecting differences between the desired state (defined in
* local Kubernetes manifest files) and the actual state (in the live cluster).
*
* It now includes functionality to automatically generate a pull request with
* the detected drift corrections when the `--open-pr` flag is used.
*
* SPDX-License-Identifier: Apache-2.0 */

use crate::config::DriftConfig;
use crate::error::{Result, Error};
use crate::git_ops; // Assuming a module for high-level git operations
use crate::reconciliation; // Assuming this module generates the corrected manifests
use anyhow::anyhow;
use chrono::Utc;
use git_ops::git_wrapper; // Specific git commands wrapper
use api_client::github_handler; // Client for GitHub API interactions

pub async fn run(config: DriftConfig) -> Result<()> {
    println!("üîé Starting 'drift' detection for git repository at {}...", config.path);

    // 1. Fetch remote state to ensure we are up-to-date
    git_wrapper::fetch_all(&config.path).await?;
    println!("‚úÖ Git remote state fetched.");

    // 2. Perform the drift detection by comparing local manifests with the cluster state.
    // This is a placeholder for the actual diff logic which we assume happens in k8s_sync_manager
    // and the results (corrected manifests) are written to the local filesystem.
    println!("‚öôÔ∏è Simulating drift detection and manifest correction...");
    let corrected_files = reconciliation::calculate_and_apply_corrections(&config.path).await?;
    if corrected_files.is_empty() {
        println!("‚úÖ No drift detected. Your configuration is in sync.");
        return Ok(());
    }
    println!("üõ†Ô∏è Detected drift in {} files. Corrected manifests have been generated locally.", corrected_files.len());

    // 3. If --open-pr is specified, create a pull request with the changes.
    if config.open_pr {
        println!("üöÄ --open-pr flag detected. Initiating pull request creation...");

        // A. Define a unique branch name
        let branch_name = format!("ph-drift-fix-{}", Utc::now().format("%Y%m%d-%H%M%S"));

        // B. Create and switch to the new branch
        git_wrapper::create_and_checkout_branch(&config.path, &branch_name).await?;
        println!("    - Created and switched to new branch: {}", branch_name);

        // C. Stage all the corrected files
        git_wrapper::add_files(&config.path, corrected_files).await?;
        println!("    - Staged corrected files.");

        // D. Commit the changes
        let commit_message = "fix(drift): Apply automated drift corrections\n\nThis commit contains automated corrections for configuration drift detected between the Git repository and the live Kubernetes cluster.".to_string();
        git_wrapper::commit(&config.path, &commit_message).await?;
        println!("    - Committed changes.");

        // E. Push the new branch to the remote repository
        git_wrapper::push_branch(&config.path, &branch_name).await?;
        println!("    - Pushed branch to remote.");

        // F. Create the Pull Request using the GitHub API client
        let pr_title = "Automated Drift Correction".to_string();
        let pr_body = "This pull request was automatically generated by `phgit` to correct configuration drift. Please review and merge.".to_string();
        
        // Assumes config contains repository and auth information.
        match github_handler::create_pull_request(&config.repo_url, &branch_name, &config.base_branch, &pr_title, &pr_body).await {
            Ok(pr_url) => {
                println!("‚úÖ Successfully created pull request: {}", pr_url);
            }
            Err(e) => {
                eprintln!("‚ùå Failed to create pull request: {}", e);
                // As a fallback, we'll leave the branch pushed so the user can create the PR manually.
                println!("    - You can still create a pull request manually for the branch '{}'.", branch_name);
                return Err(Error::Other(anyhow!("Failed to create PR: {}", e)));
            }
        }
    } else {
         println!("\n‚úÖ Drift detection complete. Corrected manifests are available locally. Run with --open-pr to create a pull request automatically.");
    }

    Ok(())
}
